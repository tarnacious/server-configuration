Storage {
  Name = StorageBox
  Address = bacula.tarnbarford.net
  Password = "{{ bareos_storagebox_password }}"
  Device = StorageBoxStorage
  Media Type = File

  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
}

Schedule {
  Name = "WeeklyCycle"
  Run = Full 1st sat at 21:00                   # (#04)
  Run = Differential 2nd-5th sat at 21:00       # (#07)
  Run = Incremental mon-fri at 21:00            # (#10)
}

Schedule {
  Name = "WeeklyCycleAfterBackup"
  Description = "This schedule does the catalog. It starts after the WeeklyCycle."
  Run = Full mon-fri at 21:10
}

JobDefs {
  Name = "StorageBoxJob"
  Type = Backup
  Level = Incremental
  Schedule = "WeeklyCycle"
  Storage = StorageBox
  FileSet = "SelfTest"
  Messages = Standard
  Pool = Incremental-StorageBox
  Priority = 10
  Write Bootstrap = "/mnt/backup/storage/%c.bsr"
  Full Backup Pool = Full-StorageBox
  Differential Backup Pool = Differential-StorageBox
  Incremental Backup Pool = Incremental-StorageBox
}

Job {
  Name = bab-database
  Client = bab-fd
  FileSet = mysql-database-dump
  JobDefs = StorageBoxJob

  RunScript {
    FailJobOnError = Yes
    RunsOnClient = Yes
    RunsWhen = Before
    Command = "sh -c 'mysqldump --opt --all-databases > /var/lib/bareos/mysql_dump.sql'"
  }

  RunScript {
    RunsOnSuccess = Yes
    RunsOnClient = Yes
    RunsWhen = After
    Command = "rm /var/lib/bareos/mysql_dump.sql"
  }
}

Job {
  Name = bab-uploads
  Client = bab-fd
  FileSet = bab-uploads
  JobDefs = StorageBoxJob
}

Job {
  Name = monitoring-rrd
  Client = monitoring-fd
  FileSet = monitoring-rrd
  JobDefs = StorageBoxJob
}

Job {
  Name = owncloud-data
  Client = owncloud-fd
  FileSet = owncloud-data
  JobDefs = StorageBoxJob
}

Job {
  Name = owncloud-database
  Client = owncloud-fd
  FileSet = mysql-database-dump
  JobDefs = StorageBoxJob

  RunScript {
    FailJobOnError = Yes
    RunsOnClient = Yes
    RunsWhen = Before
    Command = "sh -c 'mysqldump --opt --all-databases > /var/lib/bareos/mysql_dump.sql'"
  }

  RunScript {
    RunsOnSuccess = Yes
    RunsOnClient = Yes
    RunsWhen = After
    Command = "rm /var/lib/bareos/mysql_dump.sql"
  }
}

Job {
  Name = mail-server-dkim-key
  Client = mail-server-fd
  FileSet = dkim-key
  JobDefs = StorageBoxJob
}

Job {
  Name = mail-server-mailboxes
  Client = mail-server-fd
  FileSet = mail-server-mailboxes
  JobDefs = StorageBoxJob
}

Job {
  Name = mail-server-database
  Client = mail-server-fd
  FileSet = mysql-database-dump
  JobDefs = StorageBoxJob

  RunScript {
    FailJobOnError = Yes
    RunsOnClient = Yes
    RunsWhen = Before
    Command = "sh -c 'mysqldump --opt --all-databases > /var/lib/bareos/mysql_dump.sql'"
  }

  RunScript {
    RunsOnSuccess = Yes
    RunsOnClient = Yes
    RunsWhen = After
    Command = "rm /var/lib/bareos/mysql_dump.sql"
  }
}

Job {
  Name = "backup-bareos-fd"
  JobDefs = "StorageBoxJob"
  Client = "bareos-fd"
}

Job {
  Name = "BackupCatalog"
  Description = "Backup the catalog database (after the nightly save)"
  JobDefs = "StorageBoxJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  Client = "bareos-fd"

  RunBeforeJob = "/usr/lib/bareos/scripts/make_catalog_backup.pl catalog"
  RunAfterJob  = "/usr/lib/bareos/scripts/delete_catalog_backup"
  Write Bootstrap = "|/run/current-system/sw/bin/send-mail \"Bootstrap job %j\" tarn.barford@gmail.com"
  Priority = 11                   # run after main backup
}

Job {
  Name = "RestoreFiles"
  Description = "Standard Restore template. Only one such job is needed for all standard Jobs/Clients/Storage ..."
  Type = Restore
  Client = bareos-fd
  FileSet = "LinuxAll"
  Storage = StorageBox
  Pool = Incremental
  Messages = Standard
  Where = /tmp/bareos-restores
}

Pool {
  Name = Incremental
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 30 days          # How long should the Incremental Backups be kept?  (#12)
  Maximum Volume Bytes = 1G           # Limit Volume size to something reasonable
  Maximum Volumes = 100               # Limit number of Volumes in Pool
  Label Format = "Incremental-"       # Volumes will be labeled "Incremental-<volume-id>"
}

Pool {
  Name = Differential-StorageBox
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 40 days          # How long should the Differential Backups be kept? (#09)
  Maximum Volume Bytes = 10G          # Limit Volume size to something reasonable
  Maximum Volumes = 15                # Limit number of Volumes in Pool
  Label Format = "Differential-StorageBox-"      # Volumes will be labeled "Differential-<volume-id>"
}

Pool {
  Name = Incremental-StorageBox
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 40 days          # How long should the Incremental Backups be kept?  (#12)
  Maximum Volume Bytes = 1G           # Limit Volume size to something reasonable
  Maximum Volumes = 100               # Limit number of Volumes in Pool
  Label Format = "Incremental-StorageBox-"       # Volumes will be labeled "Incremental-<volume-id>"
}

Pool {
  Name = Full-StorageBox
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 60 days          # How long should the Full Backups be kept? (#06)
  Maximum Volume Bytes = 10G          # Limit Volume size to something reasonable
  Maximum Volumes = 15                # Limit number of Volumes in Pool
  Label Format = "Full-StorageBox-"   # Volumes will be labeled "Full-<volume-id>"
}

Pool {
  Name = Differential
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 90 days          # How long should the Differential Backups be kept? (#09)
  Maximum Volume Bytes = 10G          # Limit Volume size to something reasonable
  Maximum Volumes = 100               # Limit number of Volumes in Pool
  Label Format = "Differential-"      # Volumes will be labeled "Differential-<volume-id>"
}

Pool {
  Name = Full
  Pool Type = Backup
  Recycle = yes                       # Bareos can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 365 days         # How long should the Full Backups be kept? (#06)
  Maximum Volume Bytes = 50G          # Limit Volume size to something reasonable
  Maximum Volumes = 100               # Limit number of Volumes in Pool
  Label Format = "Full-"              # Volumes will be labeled "Full-<volume-id>"
}

Pool {
  Name = Scratch
  Pool Type = Scratch
}

FileSet {
  Name = "bab-uploads"
  Description = "wordpress uploads folder"
  Include {
    Options {
      Signature = MD5
    }
    File = "/var/www/bab/wordpress/"
  }
}

FileSet {
  Name = "monitoring-rrd"
  Description = "monitoring data"
  Include {
    Options {
      Signature = MD5
      wilddir = "/var/lib/munin/*/*.rrd"
    }
    File = "/var/lib/munin"
  }
}

FileSet {
  Name = "owncloud-data"
  Description = "owncloud date"
  Include {
    Options {
      Signature = MD5
    }
    File = "/var/www/owncloud"
  }
}

FileSet {
  Name = "mysql-database-dump"
  Description = "mysql database dump"
  Include {
    Options {
      Signature = MD5
    }
    File = "/var/lib/bareos/mysql_dump.sql"
  }
}

FileSet {
  Name = "mail-server-mailboxes"
  Description = "mail server mail dirs"
  Include {
    Options {
      Signature = MD5
    }
    File = "/var/vmail"
  }
}

FileSet {
  Name = "dkim-key"
  Description = "dkim key"
  Include {
    Options {
      Signature = MD5
    }
    File = "/var/lib/rspamd/dkim"
  }
}

FileSet {
  Name = "LinuxAll"
  Description = "Backup all regular filesystems, determined by filesystem type."
  Include {
    Options {
      Signature = MD5 # calculate md5 checksum per file
      One FS = No     # change into other filessytems
      FS Type = btrfs
      FS Type = ext2  # filesystems of given types will be backed up
      FS Type = ext3  # others will be ignored
      FS Type = ext4
      FS Type = reiserfs
      FS Type = jfs
      FS Type = xfs
      FS Type = zfs
    }
    File = /
  }
  # Things that usually have to be excluded
  # You have to exclude /var/lib/bareos/storage
  # on your bareos server
  Exclude {
    File = /var/lib/bareos
    File = /var/lib/bareos/storage
    File = /proc
    File = /tmp
    File = /var/tmp
    File = /.journal
    File = /.fsck
  }
}

FileSet {
  Name = "Catalog"
  Description = "Backup the catalog dump and Bareos configuration files."
  Include {
    Options {
      signature = MD5
    }
    File = "/var/lib/bareos/bareos.sql" # database dump
    File = "/etc/bareos"                   # configuration
  }
}

FileSet {
  Name = "SelfTest"
  Description = "fileset just to backup some files for selftest"
  Include {
    Options {
      Signature = MD5 # calculate md5 checksum per file
    }
    File = "/usr/sbin"
  }
}

Messages {
  Name = Standard
  operatorcommand = "/run/current-system/sw/bin/send-mail \"Intervention needed for %j\" %r"
  mailcommand = "/run/current-system/sw/bin/send-mail \"%t %e of %c %l\" %r"
  operator = tarn@tarnbarford.net = mount
  mail = tarn@tarnbarford.net = all, !skipped, !saved
  console = all, !skipped, !saved
  append = "/var/log/bacula/message.log" = all, !skipped, !saved
  catalog = all, !skipped, !saved
}

Messages {
  Name = Daemon
  mailcommand = "/run/current-system/sw/bin/send-mail "\Daemon message\" %r"
  mail = tarn@tarnbarford.net = all, !skipped
  console = all, !skipped, !saved
  append = "/var/log/bacula/message.log" = all, !skipped
}

Client {
  Name = bab-fd
  Address = bridgesacrossborders.net
  Catalog = catalog
  Password = "{{ bareos_password_bab }}"
  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
}

Client {
  Name = mail-server-fd
  Address = mail.tarnbarford.net
  Catalog = catalog
  Password = "{{ bareos_password_mailserver }}"
  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
}

Client {
  Name = monitoring-fd
  Address = monitoring.tarnbarford.net
  Catalog = catalog
  Password = "{{ bareos_password_monitoring }}"
  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
}

Client {
  Name = owncloud-fd
  Address = owncloud.tarnbarford.net
  Catalog = catalog
  Password = "{{ bareos_password_owncloud }}"
  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
}

Client {
  Name = bareos-fd
  Description = "Client resource of the Director itself."
  Catalog = catalog
  Address = localhost
  Password = "{{ bareos_client_password }}"
}

Director {                            # define myself
  Name = bareos-dir
  DirAddresses = {
    ipv6 = {
        addr = bacula.tarnbarford.net;
    }
  }
  QueryFile = "/usr/lib/bareos/scripts/query.sql"
  Maximum Concurrent Jobs = 10
  Password = "{{ bareos_director_password }}"
  WorkingDirectory = "/var/lib/bacula"
  PidDirectory = "/var/run"
  Messages = Daemon

  TLS Certificate = {{ tls_cert_path }}
  TLS Key = {{ tls_key_path }}
  TLS CA Certificate File = {{ tls_ca_path }}
  TLS Enable = yes
  TLS Require = yes
  TLS Verify Peer = yes
}

Catalog {
  Name = catalog
  user = bacula
  dbname = bacula
  dbdriver = postgresql
}
